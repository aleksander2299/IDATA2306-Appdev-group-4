{
	"info": {
		"_postman_id": "bef15432-02ea-4373-a69e-80108c410d3b",
		"name": "Booking tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "42432285"
	},
	"item": [
		{
			"name": "Register user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"newuser\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"ADMIN\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/authenticate/register"
			},
			"response": []
		},
		{
			"name": "Log in user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"jwt\", pm.response.json().token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"newuser\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/authenticate/login"
			},
			"response": []
		},
		{
			"name": "Get test user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"user_id\", pm.response.json().username);\r",
							"pm.environment.set(\"user\", JSON.stringify(pm.response.json()));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/user/newuser"
			},
			"response": []
		},
		{
			"name": "Get every booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Save booking count to a local variable\", function() {\r",
							"    const users = pm.response.json();\r",
							"    pm.expect(users).to.be.an(\"array\");\r",
							"    pm.environment.set(\"initial_booking_count\", users.length);\r",
							"    pm.environment.set(\"booking_count\", users.length);\r",
							"    console.log(\"Booking count saved to local variable:\", users.length);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": "{{BASE_URL}}/all"
			},
			"response": []
		},
		{
			"name": "Add test source",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"source_id\", pm.response.json().sourceId);\r",
							"pm.environment.set(\"source\", JSON.stringify(pm.response.json()));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"sourceID\": null,\r\n    \"sourceName\": \"TesT\",\r\n    \"locationType\": \"TestType\",\r\n    \"city\": \"TestVille\",\r\n    \"country\": \"Molde\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/source"
			},
			"response": []
		},
		{
			"name": "Add test room",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"room_id\", pm.response.json().roomId);\r",
							"pm.environment.set(\"room\", JSON.stringify(pm.response.json()));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"roomId\": null,\r\n    \"source\": null,\r\n    \"roomName\": \"TesT\",\r\n    \"description\": \"Dank\",\r\n    \"visibility\": false,\r\n    \"roomType\": \"Luxury\",\r\n    \"imageurl\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/rooms/withSource/{{source_id}}"
			},
			"response": []
		},
		{
			"name": "Add test provider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"provider_id\", pm.response.json().providerId);\r",
							"pm.environment.set(\"provider\", JSON.stringify(pm.response.json()));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"providerId\": null,\r\n    \"providerName\": \"TestName\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/providers"
			},
			"response": []
		},
		{
			"name": "Add test roomProvider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"room_provider_id\", pm.response.json().roomProviderId);\r",
							"pm.environment.set(\"room_provider\", JSON.stringify(pm.response.json()));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/roomProvider/link/{{room_id}}/{{provider_id}}/1000"
			},
			"response": []
		},
		{
			"name": "Add new booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if booking was created\", function () {\r",
							"    if (pm.response.code === 201) {\r",
							"        let count = pm.environment.get(\"booking_count\") || 0;\r",
							"        count = parseInt(count);\r",
							"\r",
							"        pm.environment.set(\"booking_count\", count + 1);\r",
							"        pm.environment.set(\"booking_id\", pm.response.json().bookingId)\r",
							"        pm.environment.set(\"booking\", JSON.stringify(pm.response.json()));\r",
							"\r",
							"        console.log(\"Booking created. Count is now:\", count + 1);\r",
							"    } else {\r",
							"        console.log(\"Booking not created. Status code:\", pm.response.code);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookingId\": null,\r\n    \"roomProvider\": null,\r\n    \"user\": null,\r\n    \"checkInDate\": \"2007-01-20\",\r\n    \"checkOutDate\": \"2007-01-25\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BASE_URL}}/withIds/{{room_provider_id}}/{{user_id}}"
			},
			"response": []
		},
		{
			"name": "Get every booking after POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"There are more booking than before\", function() {\r",
							"    pm.expect(pm.environment.get(\"booking_count\")).greaterThan(pm.environment.get(\"initial_booking_count\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": "{{BASE_URL}}/all"
			},
			"response": []
		},
		{
			"name": "Get booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the correct properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"bookingId\");\r",
							"    pm.expect(jsonData).to.have.property(\"roomProvider\");\r",
							"    pm.expect(jsonData).to.have.property(\"user\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkInDate\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkOutDate\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the correct bookingId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingId).to.eql(pm.environment.get(\"booking_id\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response is equal to stored booking object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.eql(JSON.parse(pm.environment.get(\"booking\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the correct roomProvider\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var roomProvider = jsonData.roomProvider;\r",
							"    pm.expect(roomProvider).to.eql(JSON.parse(pm.environment.get(\"room_provider\")));\r",
							"});\r",
							"pm.test(\"Response has the correct user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var user = jsonData.user;\r",
							"    pm.expect(user).to.eql(JSON.parse(pm.environment.get(\"user\")));\r",
							"});\r",
							"pm.test(\"Response has the correct dates\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.checkInDate).to.eql('2007-01-20');\r",
							"    pm.expect(jsonData.checkOutDate).to.eql('2007-01-25');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": "{{BASE_URL}}/{{booking_id}}"
			},
			"response": []
		},
		{
			"name": "Alter booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}?bookingId={{booking_id}}&checkOutDate=2007-01-23",
					"host": [
						"{{BASE_URL}}"
					],
					"query": [
						{
							"key": "bookingId",
							"value": "{{booking_id}}"
						},
						{
							"key": "checkOutDate",
							"value": "2007-01-23"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get altered booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the correct properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"bookingId\");\r",
							"    pm.expect(jsonData).to.have.property(\"roomProvider\");\r",
							"    pm.expect(jsonData).to.have.property(\"user\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkInDate\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkOutDate\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the correct bookingId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingId).to.eql(pm.environment.get(\"booking_id\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not equal to stored booking object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.eql(JSON.parse(pm.environment.get(\"booking_id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the correct roomProvider\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var roomProvider = jsonData.roomProvider;\r",
							"    pm.expect(roomProvider).to.eql(JSON.parse(pm.environment.get(\"room_provider\")));\r",
							"});\r",
							"pm.test(\"Response has the correct user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var user = jsonData.user;\r",
							"    pm.expect(user).to.eql(JSON.parse(pm.environment.get(\"user\")));\r",
							"});\r",
							"pm.test(\"Response has the correct dates\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.checkInDate).to.eql('2007-01-20');\r",
							"    pm.expect(jsonData.checkOutDate).to.eql('2007-01-23');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": "{{BASE_URL}}/{{booking_id}}"
			},
			"response": []
		},
		{
			"name": "Delete booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if booking was deleted\", function () {\r",
							"    if (pm.response.code === 200) {\r",
							"        let count = pm.environment.get(\"booking_count\") || 0;\r",
							"        count = parseInt(count);\r",
							"\r",
							"        pm.environment.set(\"booking_count\", count - 1);\r",
							"\r",
							"        console.log(\"Booking deleted. Count is now:\", count - 1);\r",
							"    } else {\r",
							"        console.log(\"booking not deleted. Status code:\", pm.response.code);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BASE_URL}}/{{booking_id}}"
			},
			"response": []
		},
		{
			"name": "Get every booking after DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"There are more users than before\", function() {\r",
							"    pm.expect(pm.environment.get(\"booking_count\")).equal(pm.environment.get(\"initial_booking_count\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": "{{BASE_URL}}/all"
			},
			"response": []
		},
		{
			"name": "Delete test roomProvider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/roomProvider/unlink/{{room_id}}/{{provider_id}}"
			},
			"response": []
		},
		{
			"name": "Delete test provider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/providers/{{provider_id}}"
			},
			"response": []
		},
		{
			"name": "Delete test room",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/rooms/{{room_id}}"
			},
			"response": []
		},
		{
			"name": "Delete test source",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/source/{{source_id}}"
			},
			"response": []
		},
		{
			"name": "Delete test user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"newuser\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"ADMIN\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/user"
			},
			"response": []
		}
	]
}